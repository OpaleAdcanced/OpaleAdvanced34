<?xml version="1.0" encoding="UTF-8"?>
<!--
 * LICENCE[[
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1/CeCILL 2.O 
 *
 * The contents of this file are subject to the Mozilla Public License Version 
 * 1.1 (the "License"); you may not use this file except in compliance with 
 * the License. You may obtain a copy of the License at http://www.mozilla.org/MPL/ 
 * 
 * Software distributed under the License is distributed on an "AS IS" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License 
 * for the specific language governing rights and limitations under the 
 * License. 
 * 
 * The Original Code is kelis.fr code. 
 * 
 * The Initial Developer of the Original Code is 
 * antoine.pourchez@kelis.fr on behalf of USTL / SEMM (http://semm.univ-lille1.fr)
 * 
 * Portions created by the Initial Developer are Copyright (C) 2005 
 * the Initial Developer. All Rights Reserved. 
 * 
 * Contributor(s): 
 * 
 * 
 * Alternatively, the contents of this file may be used under the terms of 
 * either of the GNU General Public License Version 2 or later (the "GPL"), 
 * or the GNU Lesser General Public License Version 2.1 or later (the "LGPL"), 
 * or the CeCILL Licence Version 2.0 (http://www.cecill.info/licences.en.html), 
 * in which case the provisions of the GPL, the LGPL or the CeCILL are applicable 
 * instead of those above. If you wish to allow use of your version of this file 
 * only under the terms of either the GPL or the LGPL, and not to allow others 
 * to use your version of this file under the terms of the MPL, indicate your 
 * decision by deleting the provisions above and replace them with the notice 
 * and other provisions required by the GPL or the LGPL. If you do not delete 
 * the provisions above, a recipient may use your version of this file under 
 * the terms of any one of the MPL, the GPL, the LGPL or the CeCILL.
 * ]]LICENCE
 -->
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" xmlns:xbl="http://www.mozilla.org/xbl">
    <!-- ####################### TEXT EDITOR ####################### -->
    <binding id="sctabmathtexeditor" extends="chrome://scenariWsp/content/widgets/sctab/sctab.xbl.xml#sctabtexteditor">
        <content orient="vertical"  code="textedit">
            <xul:vbox class="panelZone" flex="1" style="-moz-binding: url(chrome://scenariWsp/content/widgets/sctab/texteditor.xbl.xml#texteditor);"/>
            <xul:hbox class="previewZone" height="100px" style="overflow:auto;background-color:#ffeaef;">
                <xul:box flex="1"/>
                <xul:vbox>
                    <xul:box flex="1"/>
                       <xul:itemimage anonid="imgBox" style="-moz-binding: url('chrome://scenariWsp/content/widgets/renderers/image.xbl.xml#itemimage')"/>
                    <xul:box flex="1"/>
                </xul:vbox>
                <xul:box flex="1"/>
            </xul:hbox>
        </content>
        <implementation>
            <constructor>
                try{
                   // maj interface
                   this.xRefreshImgBox();
                }catch(e){log.debug(e); }
            </constructor>
            <method name="xGetContentFromServer">
				<body><![CDATA[
					return this.fUriObject.getTextContent(null, "facet=content");
				]]></body>
			</method>
            <method name="xRefreshImgBox">
                <parameter name="pTemporised"/><!-- booleen -->
                <body><![CDATA[
                    try{
                       var vEditor = this;
                       var vTimer = pTemporised ? 1000 : 0;
                       function xRefresh(){
                           var vContent = vEditor.xGetContentFromEditor();
                           var vTransform = "transform=latex2img&resolution=96";
                           if(vContent) vTransform+="&content="+window.encodeURIComponent(vContent);
                           vEditor.fImgBox.setAttribute("transform", vTransform);
                           vEditor.fImgBox.refresh();
                           delete vEditor._Timeout;
                       }
                       if(this._Timeout) window.clearTimeout(this._Timeout);
                       this._Timeout = window.setTimeout(xRefresh, vTimer);
                     }catch(e){log.debug(e); }
                ]]></body>
            </method>
            <field name="fImgBox">document.getAnonymousElementByAttribute(this, "anonid", "imgBox")</field>
        </implementation>
        
        <handlers>
            <handler event="keyup"><![CDATA[
                this.xRefreshImgBox(true);
            ]]></handler>
        </handlers>
    </binding>
</bindings>
